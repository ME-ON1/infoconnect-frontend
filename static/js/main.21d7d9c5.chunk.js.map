{"version":3,"sources":["component/register.jsx","App.js","reportWebVitals.js","index.js"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","emailRe","Register","useState","batch","undefined","email","name","state","setState","error","errorValidation","setError","validateForm","valid","Object","values","forEach","val","console","log","handleChange","e","target","value","prevState","handleBlur","trim","length","test","String","isNaN","Item","label","rules","onChange","onBlur","autoComplete","type","htmlType","onClick","axios","post","process","then","res","catch","er","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21d7d9c5.chunk.js","sourcesContent":["import { Button, Form, Input, Alert } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\nconst nameRes = /([a-zA-Z]{3,30}s*)+/;\nconst emailRe = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nconst dateRes = /(19|20)[0-9][0-9]/;\nfunction Register() {\n  const [state, setState] = useState({\n    batch: undefined,\n    email: \"\",\n    name: \"\",\n  });\n  const [errorValidation, setError] = useState({\n    batch: false,\n    email: false,\n    name: false,\n    error: false,\n  });\n  // const ClickCapture = (e) => {\n  //   return new Promise((resolve, reject) => {\n  //     if (nameRes.test(String(state.name))) {\n  //       handleError({ ...errorValidation, name: true, error: true });\n  //     }\n  //     if (!emailRe.test(String(state.email))) {\n  //       handleError({ ...errorValidation, email: true, error: true });\n  //     }\n  //     if (!dateRes.test(String(state.batch))) {\n  //       handleError({ ...errorValidation, batch: true, error: true });\n  //     }\n\n  //     if (!errorValidation.error) {\n  //       return resolve();\n  //     } else {\n  //       return reject();\n  //     }\n  //   });\n  // };\n\n  const handleClick = (e) => {\n    // e.preventDefault();\n    if (validateForm(errorValidation)) {\n      const { name, email, batch } = state;\n      axios\n        .post(`${process.env.REACT_APP_PROD_URL}/post`, {\n          name,\n          email,\n          batch,\n        })\n        .then((res) => {\n          console.log(res);\n          console.log(\"post succeded ! \");\n        })\n        .then(() => {\n          setState({ name: \"\", email: \"\", batch: undefined });\n        })\n        .catch((er) => {\n          console.log(er);\n        });\n    }\n  };\n\n  const validateForm = (error) => {\n    let valid = true;\n    Object.values(error).forEach((val) => {\n      if (val) {\n        valid = false;\n        return valid;\n      }\n    });\n    console.log(valid, \"valid\");\n    return valid;\n  };\n\n  const handleChange = (e) => {\n    let { name, value } = e.target;\n\n    // console.log(name, value);\n    if (name === \"batch\") {\n      value = +value;\n    }\n    console.log(value, \" batch \");\n\n    setState((prevState) => {\n      return {\n        ...state,\n        [name]: value,\n      };\n    });\n  };\n\n  const handleBlur = (e) => {\n    let { name, value } = e.target;\n\n    if (name === \"batch\") {\n      value = +value;\n    }\n    // console.log(name, value, \"blue \", errorValidation);\n    console.log(state, errorValidation);\n    console.log(value, typeof value);\n    if (name === \"name\") {\n      setError({\n        ...errorValidation,\n        name: !value.trim().length > 5,\n        error: !value.trim().length > 5,\n      });\n    }\n\n    if (name === \"email\") {\n      setError({\n        ...errorValidation,\n        email: !emailRe.test(String(value)),\n        error: !emailRe.test(String(value)),\n      });\n    }\n\n    if (name === \"batch\") {\n      setError({\n        ...errorValidation,\n        batch: !(!isNaN(value) && value < 2030 && value > 2000),\n        error: !(!isNaN(value) && value < 2030 && value > 2000),\n      });\n    }\n  };\n\n  return (\n    <Form {...layout} /*onSubmit={(e) => handleSubmit(e)}*/>\n      <Form.Item\n        label=\"Name\"\n        name=\"name\"\n        rules={[\n          {\n            // required: true,\n            // message: \"Please Enter your name\",\n          },\n        ]}\n      >\n        {errorValidation.name && \"name should be something alphabets\"}\n        <Input\n          onChange={handleChange}\n          name=\"name\"\n          onBlur={handleBlur}\n          value={state.name}\n          autoComplete={false}\n        ></Input>\n        {/* {errorValidation.name ? (? */}\n      </Form.Item>\n\n      <Form.Item\n        label=\"E-mail\"\n        name=\"email\"\n        rules={[\n          {\n            // required: true,\n            // message: \"Need your Email-Id For mail\",\n          },\n        ]}\n      >\n        {errorValidation.email && \"email should be real!\"}\n        <Input\n          autoComplete={false}\n          onChange={handleChange}\n          name=\"email\"\n          onBlur={handleBlur}\n          value={state.email}\n        ></Input>\n        {/* {errorValidation.email ? (\n          <Alert message=\"email address should be genuine\" type=\"error\" />\n        ) : (\n          \"\"\n        )} */}\n      </Form.Item>\n\n      <Form.Item\n        label=\"Batch\"\n        name=\"batch\"\n        rules={[\n          {\n            // message: \"If you could specify\t your batch, not neccessary tho\",\n          },\n        ]}\n      >\n        {errorValidation.batch && \"batch should be number\"}\n        <Input\n          autoComplete={false}\n          onChange={handleChange}\n          name=\"batch\"\n          onBlur={handleBlur}\n          value={state.batch}\n        ></Input>\n\n        {/* {errorValidation.batch ? (\n          <Alert\n            message=\"batch should be number in format YYYY\"\n            type=\"error\"\n            closable={true}\n          />\n        ) : (\n          \"\"\n        )} */}\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" onClick={handleClick}>\n          Add me\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default Register;\n","import Register from \"./component/register.jsx\"\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t  <Register />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}